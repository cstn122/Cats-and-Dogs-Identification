# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EPZVxYZOjGNM-TqkbW3yv0SliJEaY5kO
"""

import pandas as pd
from PIL import Image
import keras
from keras.preprocessing.image import load_img, img_to_array, ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, BatchNormalization, Conv2D, MaxPooling2D, ZeroPadding2D
from keras.utils import to_categorical
from keras.utils.vis_utils import plot_model
from matplotlib import pyplot, cm
from matplotlib.image import imread
import numpy as np
from numpy import asarray, save, load
from random import seed
import random
import time
from sklearn.metrics import confusion_matrix, classification_report
import itertools
import seaborn as sns

start = time.process_time()

# unzip data
!unzip '/content/data2.zip' -d '/content/'

train_dir = '/content/train/'
validation_dir = '/content/validation/'

# data augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary',
)

test_datagen = ImageDataGenerator(rescale=1./255) # 驗證集不用增強
validation_generator = test_datagen.flow_from_directory(
    validation_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary'
)
#######################################################################################
  
# 建立卷積神經網路
network = Sequential( )
network.add( Conv2D( filters = 32, kernel_size = ( 3, 3 ), 
             input_shape = ( 128, 128, 3 ), padding = 'same' ) )
network.add(Activation('relu'))
network.add( Conv2D( filters = 64, kernel_size = ( 3, 3 ), 
             padding = 'same' ) )
network.add( MaxPooling2D( pool_size = ( 2, 2 ) ) ) 
network.add( Conv2D( filters = 64, kernel_size = ( 3, 3 ), 
             padding = 'same' ) )
network.add(Activation('relu'))
network.add( MaxPooling2D( pool_size = ( 2, 2 ) ) ) 
network.add( Dropout(0.25))
network.add( Flatten( ) )
network.add( Dense( 128, ) )
network.add(Activation('relu'))
network.add( Dense( 1,))
network.add(BatchNormalization())
network.add(Activation('sigmoid'))
network.compile( optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'] )
print( network.summary() )
# plot model diagram
plot_model(network, show_shapes=True, show_layer_names=True)
pyplot.show()

# fit model
history = network.fit_generator(train_generator, steps_per_epoch=len(train_generator),
 validation_data=validation_generator, validation_steps=len(validation_generator), epochs=100, verbose=1)

# 測試階段
test_loss, test_acc = network.evaluate( validation_generator )
print( "Test Accuracy:", test_acc )

# plot diagnostic learning curves
def summarize_diagnostics(history): 
  # plot loss
  pyplot.subplot(211)
  pyplot.title('Network Accuracy')
  pyplot.plot(history.history['accuracy'], color='blue', label='train')
  pyplot.plot(history.history['val_accuracy'], color='orange', label='test')
 # plot accuracy
  pyplot.subplot(212)
  pyplot.title('Network Loss')
  pyplot.plot(history.history['loss'], color='blue', label='train')
  pyplot.plot(history.history['val_loss'], color='orange', label='test')
summarize_diagnostics(history)

# save
network.save('/content/model.h5')
#######################################################################################
'''
# Classification Report
Y_pred = network.predict_generator(validation_generator, 2002 // 33)
y_pred = np.argmax(Y_pred, axis=1)
print('Confusion Matrix')
print(confusion_matrix(validation_generator.classes, y_pred))
print('Classification Report')
target_names = ['Cats', 'Dogs']
print(classification_report(validation_generator.classes, y_pred, target_names=target_names))
'''
y_pred=network.predict_classes(validation_generator)
con_mat = confusion_matrix(labels=[1,0], y_true=validation_generator.classes, y_pred=y_pred)
con_mat_norm = np.around(con_mat.astype('float') / con_mat.sum(axis=1)[:, np.newaxis], decimals=2)
con_mat_df = pd.DataFrame(con_mat_norm,)
figure = pyplot.figure(figsize=(8, 8))
sns.heatmap(con_mat_df, annot=True, cmap=pyplot.cm.Blues)
pyplot.tight_layout()
pyplot.ylabel('True label')
pyplot.xlabel('Predicted label')
pyplot.show()

print("--- time cost: %d minutes %2.2f seconds ---" % (((time.process_time() - start)/60), ((time.process_time() - start)%60)))